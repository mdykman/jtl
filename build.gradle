
import java.nio.file.*

group='org.dykman'
version='0.9.53'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'antlr'

repositories {
    jcenter()
}

compileJava {
    sourceCompatibility=1.8
    targetCompatibility=1.8
}

mainClassName = "org.dykman.jtl.JtlMain"
applicationName = "jtl"
applicationDefaultJvmArgs=["-DJTL_HOME=MY_APP_HOME"]

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    runtime 'org.slf4j:slf4j-log4j12:1.7.12'

    compile 'log4j:log4j:1.2.7'
    
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.17'

    compile 'com.google.guava:guava:18.0'
    
    compile 'com.zaxxer:HikariCP:2.4.1'
    runtime 'com.zaxxer:HikariCP:2.4.1'

    // jdbc drivers
    //runtime 'mysql:mysql-connector-java:5.1.35'
    runtime 'org.xerial:sqlite-jdbc:3.8.10.1'

    antlr "org.antlr:antlr4:4.5"

    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-csv:1.2'
    compile 'commons-io:commons-io:2.4'

    compile 'commons-cli:commons-cli:1.3.1'

    compile 'commons-codec:commons-codec:1.10'

    compile 'commons-httpclient:commons-httpclient:3.1'

    compile 'jline:jline:2.13'


    compile 'org.eclipse.jetty:jetty-server:9.3.5.v20151012'
    compile 'org.eclipse.jetty:jetty-servlet:9.3.5.v20151012'
    testCompile "junit:junit:4.12"
}

compileJava.dependsOn generateGrammarSource
distZip.dependsOn test
build.dependsOn distZip
clean.dependsOn cleanCompileJava

sourceSets.main.java.srcDirs += "$buildDir/generated-src"
sourceSets.main.java.srcDirs += "src/target/generated"

configurations {
   compile.extendsFrom antlr4
}

eclipse {
    jdt {
        sourceCompatibility=1.8
        targetCompatibility=1.8
    }
}

def versionPath = "$buildDir/generated-src/org/dykman/jtl/JtlVersion.java"
task cleanGenerateVersion {
    File f = new File(versionPath)
    f.delete();
}

task generateVersion {
    outputs.upToDateWhen { false }
    File f = new File(versionPath)
    f.parentFile.mkdirs();
    f.withWriter { out ->
        out.println("""
package org.dykman.jtl;

public class JtlVersion {
    static final String JTL_VERSION="${version}";
}
        """);
    }
}


generateGrammarSource {
    def antlrPackage = 'org.dykman.jtl'
    def myOutputDirectory = new File(outputDirectory , String.join("/", antlrPackage.split("[.]")))
    arguments = arguments + [ "-package", antlrPackage, "-visitor" ]
    // arguments = arguments + ["-package", antlrPackage, "-o", myOutputDirectory.getPath()]
}

task correctThePackage(type: Copy) {
    outputs.upToDateWhen { false }
    from "$buildDir/generated-src/antlr/main"
    into "$buildDir/generated-src/org/dykman/jtl"
    include '*.java'
}

task cleanupAntlr(type:Delete) {
    outputs.upToDateWhen { false }
    //Project.files(java.lang.Object[]).
    delete files("$buildDir/generated-src/antlr")
}

clean.dependsOn cleanGenerateVersion
compileJava.dependsOn generateVersion
generateVersion.dependsOn correctThePackage
generateVersion.dependsOn cleanupAntlr
cleanupAntlr.dependsOn correctThePackage

correctThePackage.dependsOn generateGrammarSource

startScripts {
    doLast {
        unixScript.text = unixScript.text.replace('MY_APP_HOME', '\$APP_HOME') 
        windowsScript.text = windowsScript.text.replace('MY_APP_HOME', '%~dp0..')
    }
}


distZip {
    into("${project.name}-${version}") {
        from '.'
        include 'conf/*'
    }
}
